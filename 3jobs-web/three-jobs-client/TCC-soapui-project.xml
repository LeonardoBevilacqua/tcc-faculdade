<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="680a79f3-34b4-4740-9f52-d05601d2b281" activeEnvironment="Default" name="TCC" resourceRoot="${projectDir}" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="afd37610-5003-4a77-aed6-03a1c05e5196" wadlVersion="http://wadl.dev.java.net/2009/02" name="" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/><con:resource name="Teste" path="/teste" id="950c7233-0dba-4baf-8951-93f51876a998"><con:settings/><con:parameters/><con:method name="Teste 1" id="10a402dd-c3c1-458e-841e-0a4122740432" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="6117df03-9699-4684-98f8-cc5273972af7" mediaType="application/json"><con:settings/><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="4f6a84a3-a6b9-4299-8ebc-26aaab092939" port="8080" path="/" host="localhost" name="REST MockService 1" docroot=""><con:settings/><con:properties/><con:onRequestScript>log.info("HEADER : " + mockRequest.getRequestHeaders())
log.info("BODY : " + mockRequest.getRequestContent())</con:onRequestScript><con:restMockAction name="/users" method="POST" resourcePath="/users" id="addbc569-5b01-42e1-be2c-892fbd078e0b"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="3ce63fdc-75fa-4df2-8e15-dab77c99783d" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent>{"status": "ok"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="jobs" method="GET" resourcePath="/jobs" id="4f1bac67-6449-43cb-acaf-6b0d0c447387"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("1") )
{
    // return the name of the response you want to dispatch
    return "Response 1"
}

if( requestPath.contains("2") )
{
    // return the name of the response you want to dispatch
    return "Response 2"
}
</con:dispatchPath><con:response name="Response 1" id="e8105cd6-d11f-44e0-ad8e-e0cac824fdb9" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "title": "Title da Vaga 1",
    "description": "Description da Vaga",
    "jobRole": "jobRole Pleno",
    "requirement": "Responsável por planejar, executar e controlar o esforço necessário á manutenção da garantia da qualidade do produto e os testes realizados. Realizar a validação no pacote final proveniente da integração de dois ou mais produtos de sprints. Apoiar a Homologação de versões. Manter em execução processos dos sistemas nos ambientes internos. Apoiar a equipe de homologação ativa (HMP) dos sistemas. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliquaut enim ad minim veniam.",
    "benefit": "Assistência médica, Assistência odontológica, Auxílio desenvolvimento, Consignado, Seguro de vida, Vale alimentação, Vale-refeição, Vale-transporte.",
    "beginDate": "Date",
    "endDate": "10/10/2010",
    "users": "Array&lt;User>",
    "company": {
        "name": "Nome da Company",
        "description": "string",
        "address": {
            "zipCode": "string",
            "state": "string",
            "city": "Cidade da Company",
            "district": "string",
            "name": "string"
        }
    },
    "tags": [
        {
            "description": "JAVA"
        },
        {
            "description": "SQL"
        },
        {
            "description": "TESTE"
        }
    ]
}</con:responseContent></con:response><con:response name="Response 2" id="29f3dca9-7046-491c-9f2c-210ae0f36af8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "title": "Title da Vaga 2",
    "description": "Description da Vaga",
    "jobRole": "jobRole Pleno",
    "requirement": "Responsável por planejar, executar e controlar o esforço necessário á manutenção da garantia da qualidade do produto e os testes realizados. Realizar a validação no pacote final proveniente da integração de dois ou mais produtos de sprints. Apoiar a Homologação de versões. Manter em execução processos dos sistemas nos ambientes internos. Apoiar a equipe de homologação ativa (HMP) dos sistemas. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliquaut enim ad minim veniam.",
    "benefit": "Assistência médica, Assistência odontológica, Auxílio desenvolvimento, Consignado, Seguro de vida, Vale alimentação, Vale-refeição, Vale-transporte.",
    "beginDate": "Date",
    "endDate": "10/10/2010",
    "users": "Array&lt;User>",
    "company": {
        "name": "Nome da Company",
        "description": "string",
        "address": {
            "zipCode": "string",
            "state": "string",
            "city": "Cidade da Company",
            "district": "string",
            "name": "string"
        }
    },
    "tags": [
        {
            "description": "JAVA"
        },
        {
            "description": "SQL"
        },
        {
            "description": "TESTE"
        }
    ]
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>